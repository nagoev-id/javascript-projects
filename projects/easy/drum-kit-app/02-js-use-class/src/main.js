/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ä–∞–±–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä (Drum Kit).
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö, –∫–ª–∏–∫–∞—è –º—ã—à–∫–æ–π –∏–ª–∏ –Ω–∞–∂–∏–º–∞—è –∫–ª–∞–≤–∏—à–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
 * –ö–∞–∂–¥—ã–π –±–∞—Ä–∞–±–∞–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω–æ –∏ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–≤—É–∫.
 */

import './style.css';
import w from '/images/tom1.png';
import a from '/images/tom2.png';
import s from '/images/tom3.png';
import d from '/images/tom4.png';
import j from '/images/snare.png';
import k from '/images/crash.png';
import l from '/images/kick.png';
import sound1 from '/sounds/tom-1.mp3';
import sound2 from '/sounds/tom-2.mp3';
import sound3 from '/sounds/tom-3.mp3';
import sound4 from '/sounds/tom-4.mp3';
import sound5 from '/sounds/crash.mp3';
import sound6 from '/sounds/snare.mp3';
import sound7 from '/sounds/kick-bass.mp3';

/**
 * –ö–ª–∞—Å—Å DrumKit –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ä–∞–±–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä.
 */
class DrumKit {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä DrumKit.
   */
  constructor() {
    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * @type {Object}
     */
    this.config = {
      /** @type {string} –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
      root: '#app',
      /** @type {Object} –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM */
      selectors: {
        /** @type {string} –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤ */
        drumList: '[data-drum-list]',
      },
    };

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * @type {Object}
     */
    this.state = {
      /** @type {Object} –≠–ª–µ–º–µ–Ω—Ç—ã DOM */
      elements: {
        /** @type {HTMLElement|null} –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤ */
        drumList: null,
      },
    };

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * @type {Object}
     */
    this.utils = {
      /**
       * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
       * @param {string} element - –°—Ç—Ä–æ–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
       * @returns {string} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
       */
      renderDataAttributes: (element) => element.slice(1, -1),
    };

    this.init();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
   */
  createAppHTML() {
    const {
      root,
      selectors: { drumList },
    } = this.config;
    const { renderDataAttributes } = this.utils;
    const rootElement = document.querySelector(root);

    if (!rootElement) return;

    rootElement.innerHTML = `
    <div class='drum-kit grid w-full max-w-8xl gap-4 rounded border bg-white p-3 shadow'>
      <h1 class='text-center text-2xl font-bold md:text-4xl'>Drum ü•Å Kit</h1>
      <ul ${renderDataAttributes(drumList)}>
        <li class='w' style="background-image: url('${w}')" data-drum-key="w" data-drum-sound="sound1">w</li>
        <li class='a' style="background-image: url('${a}')" data-drum-key="a" data-drum-sound="sound2">a</li>
        <li class='s' style="background-image: url('${s}')" data-drum-key="s" data-drum-sound="sound3">s</li>
        <li class='d' style="background-image: url('${d}')" data-drum-key="d" data-drum-sound="sound4">d</li>
        <li class='j' style="background-image: url('${j}')" data-drum-key="j" data-drum-sound="sound5">j</li>
        <li class='k' style="background-image: url('${k}')" data-drum-key="k" data-drum-sound="sound6">k</li>
        <li class='l' style="background-image: url('${l}')" data-drum-key="l" data-drum-sound="sound7">l</li>
      </ul>
    </div>
  `;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã DOM.
   */
  initDOMElements() {
    this.state.elements = {
      drumList: document.querySelector(this.config.selectors.drumList),
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
   */
  init() {
    this.createAppHTML();
    this.initDOMElements();
    this.state.elements.drumList.addEventListener('click', this.handleDrumKit.bind(this));
    window.addEventListener('keydown', this.handleDrumKit.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞—Ä–∞–±–∞–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
   */
  handleDrumKit({ type, target, key: keyboardKey }) {
    if (type === 'click') {
      const key = target.closest('[data-drum-key]');
      const sound = target.dataset.drumSound;

      if (key) {
        this.animate(key);
        this.play(sound);
      }
    } else if (type === 'keydown') {
      const key = document.querySelector(
        `[data-drum-key="${keyboardKey.toLowerCase()}"]`,
      );
      if (key) {
        const sound = key.dataset.drumSound;
        this.animate(key);
        this.play(sound);
      }
    }
  }

  /**
   * –ê–Ω–∏–º–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –±–∞—Ä–∞–±–∞–Ω–∞.
   * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.
   */
  animate(element) {
    element.classList.add('pressed');
    setTimeout(() => element.classList.remove('pressed'), 300);
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –±–∞—Ä–∞–±–∞–Ω–∞.
   * @param {string} audioName - –ò–º—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
   */
  play(audioName) {
    const audioMap = {
      sound1,
      sound2,
      sound3,
      sound4,
      sound5,
      sound6,
      sound7,
    };
    const audio = audioMap[audioName];
    if (audio) {
      new Audio(audio).play();
    }
  }
}

new DrumKit();
