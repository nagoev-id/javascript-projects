import './style.css';
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';

/**
 * Countdown App
 *
 * –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç.
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ –æ—Ç—Å—á–µ—Ç.
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö, —á–∞—Å–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö –∏ —Å–µ–∫—É–Ω–¥–∞—Ö.
 * –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage –¥–ª—è persistance –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.
 */

class Countdown {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Countdown.
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Ç–∏–ª–∏—Ç—ã.
   */
  constructor() {
    this.config = {
      root: '#app',
      selectors: {
        title: '[data-countdown-title]',
        config: '[data-countdown-config]',
        form: '[data-countdown-form]',
        date: '[data-countdown-date]',
        display: '[data-countdown-display]',
        days: '[data-countdown-days]',
        hours: '[data-countdown-hours]',
        minutes: '[data-countdown-minutes]',
        seconds: '[data-countdown-seconds]',
        reset: '[data-countdown-reset]',
        finish: '[data-countdown-finish]',
        finishText: '[data-countdown-finish-text]',
        finishBtn: '[data-countdown-finish-btn]',
      },
    };

    this.state = {
      elements: {},
      today: new Date().toISOString().split('T')[0],
      countdownValue: null,
      interval: null,
      countdownName: null,
      countdownDate: null,
    };

    this.utils = {
      addLeadingZero: (num) => num.toString().padStart(2, '0'),
      capitalizeFirstLetter: (str) => str.charAt(0).toUpperCase() + str.slice(1),
      renderDataAttributes: (element) => element.slice(1, -1),
      toastConfig: {
        className: 'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
        duration: 3000,
        gravity: 'bottom',
        position: 'center',
      },
      showToast: (message) => {
        Toastify({
          text: message,
          ...this.utils.toastConfig,
        }).showToast();
      },
    };

    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
   * –°–æ–∑–¥–∞–µ—Ç HTML, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage,
   * —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
   */
  init() {
    this.createAppHTML();
    this.initDOMElements();
    this.displayLocalStorageData();
    this.state.elements.date.setAttribute('min', this.state.today);
    this.state.elements.form.addEventListener('submit', this.handleFormSubmit.bind(this));
    [this.state.elements.reset, this.state.elements.finishBtn].forEach((btn) =>
      btn.addEventListener('click', this.handleResetClick.bind(this)),
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
   */
  createAppHTML() {
    const {
      root,
      selectors: {
        title,
        config,
        form,
        date,
        display,
        reset,
        finish,
        finishText,
        finishBtn,
      },
    } = this.config;
    const { renderDataAttributes } = this.utils;
    const rootElement = document.querySelector(root);

    if (!rootElement) return;

    rootElement.innerHTML = `
    <div class='max-w-md w-full rounded border bg-white p-3 shadow grid gap-4'>
      <h1 class='text-center text-2xl font-bold md:text-4xl' ${renderDataAttributes(title)}>Countdown</h1>
      <div ${renderDataAttributes(config)}>
        <form class='grid gap-3' ${renderDataAttributes(form)}>
          <label class='grid gap-1'>
            <span class='text-sm font-medium'>Name</span>
            <input
              class='w-full rounded border bg-slate-50 px-3 py-2 focus:border-blue-400 focus:outline-none'
              type='text'
              name='name'
              placeholder='What are you counting down to?'
            >
          </label>
          <label class='grid gap-1'>
            <span class='text-sm font-medium'>Date</span>
            <input
              class='w-full rounded border bg-slate-50 px-3 py-2 focus:border-blue-400 focus:outline-none'
              type='date'
              name='target'
              ${renderDataAttributes(date)}
            >
          </label>
          <button class='border px-3 py-2 hover:bg-slate-50' type='submit'>Submit</button>
        </form>
      </div>
      <div class='hidden grid gap-3' ${renderDataAttributes(display)}>
        <ul class='grid grid-cols-4 gap-2'>
          ${['days', 'hours', 'minutes', 'seconds'].map(
      (i) => `
            <li class='grid gap-1 place-items-center'>
              <p class='text-5xl font-bold' data-countdown-${i}>00</p>
              <p class='font-bold'>${this.utils.capitalizeFirstLetter(i)}</p>
            </li>
          `,
    )
      .join('')}
        </ul>
        <button class='border px-3 py-2 hover:bg-slate-50' ${renderDataAttributes(reset)}>Reset</button>
      </div>
      <div class='hidden grid gap-3' ${renderDataAttributes(finish)}>
        <p class='text-center' ${renderDataAttributes(finishText)}></p>
        <button class='border px-3 py-2 hover:bg-slate-50' ${renderDataAttributes(finishBtn)}>New Countdown</button>
      </div>
    </div>
  `;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã DOM –≤ this.state.elements.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
   */
  initDOMElements() {
    this.state.elements = Object.entries(this.config.selectors).reduce((acc, [key, selector]) => {
      acc[key] = document.querySelector(selector);
      return acc;
    }, {});
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
   * –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI.
   */
  displayLocalStorageData() {
    const { name, date } = JSON.parse(localStorage.getItem('countdown')) || {};
    if (name && date) {
      this.setCountdownDetails(name, date);
      this.updateCountdownUI();
      this.updateCountdown();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
   */
  updateCountdown() {
    const updateTimer = () => {
      const now = Date.now();
      const diff = this.state.countdownValue - now;

      if (diff < 0) {
        clearInterval(this.state.interval);
        this.finishCountdown();
      } else {
        this.updateCountdownDisplay(diff);
      }
    };

    this.updateCountdownUI();
    updateTimer();
    this.state.interval = setInterval(updateTimer, 1000);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç.
   * –û—á–∏—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—Å—á–µ—Ç–∞.
   */
  finishCountdown() {
    clearInterval(this.state.interval);

    const { elements } = this.state;
    elements.display.classList.add('hidden');
    elements.finish.classList.remove('hidden');
    elements.title.textContent = 'Countdown Complete üéä';
    elements.finishText.textContent = `${this.state.countdownName} finished on ${this.state.countdownDate}`;
    elements.form.reset();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   * @param {number} diff - –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–æ–π.
   */
  updateCountdownDisplay(diff) {
    const MS_PER_SECOND = 1000;
    const MS_PER_MINUTE = MS_PER_SECOND * 60;
    const MS_PER_HOUR = MS_PER_MINUTE * 60;
    const MS_PER_DAY = MS_PER_HOUR * 24;

    const timeUnits = {
      days: Math.floor(diff / MS_PER_DAY),
      hours: Math.floor((diff % MS_PER_DAY) / MS_PER_HOUR),
      minutes: Math.floor((diff % MS_PER_HOUR) / MS_PER_MINUTE),
      seconds: Math.floor((diff % MS_PER_MINUTE) / MS_PER_SECOND),
    };

    Object.entries(timeUnits).forEach(([unit, value]) => {
      this.state.elements[unit].textContent = this.utils.addLeadingZero(value);
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
   */
  handleFormSubmit(event) {
    event.preventDefault();
    const { name, target } = Object.fromEntries(new FormData(event.target));

    if (!name || !target) {
      this.utils.showToast('Please fill the fields');
      return;
    }

    this.setCountdownDetails(name, target);
    localStorage.setItem('countdown', JSON.stringify({
      name: this.state.countdownName,
      date: this.state.countdownDate,
    }));
    this.updateCountdown();
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   * @param {string} date - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   */
  setCountdownDetails(name, date) {
    this.state.countdownName = name;
    this.state.countdownDate = date;
    this.state.countdownValue = new Date(this.state.countdownDate).getTime();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—á–µ—Ç–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
   */

  updateCountdownUI() {
    this.state.elements.title.innerHTML = this.state.countdownName;
    this.state.elements.display.classList.remove('hidden');
    this.state.elements.config.classList.add('hidden');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞.
   * –û—á–∏—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   * –∏ –æ—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
   */
  handleResetClick() {
    clearInterval(this.state.interval);
    this.resetUI();
    localStorage.clear();
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
   * –°–∫—Ä—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è,
   * –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
   * –∏ –æ—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É.
   */
  resetUI() {
    const { elements } = this.state;
    const { display, finish, config, title, form } = elements;

    [display, finish].forEach(el => el.classList.add('hidden'));
    config.classList.remove('hidden');
    title.textContent = 'Countdown';
    form.reset();
  }
}

new Countdown();
