/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ". –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏.
 * –ö–æ–¥ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 */

import './style.css';
import confetti from 'canvas-confetti';
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';

class GuessRandomNumber {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Ç–∏–ª–∏—Ç—ã –∏–≥—Ä—ã.
   */
  constructor() {
    /**
     * @type {Object} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
     * @property {string} root - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @property {Object} selectors - –°–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã
     */
    this.config = {
      root: '#app',
      selectors: {
        game: '[data-game]',
        message: '[data-message]',
        restartButton: '[data-restart-button]',
        input: '[data-input]',
      },
    };

    /**
     * @type {Object} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @property {number} randomNumber - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å
     * @property {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
     * @property {Object} elements - DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
     */
    this.state = {
      randomNumber: Math.floor(Math.random() * (10 - 1 + 1)) + 1,
      maxAttempts: 3,
      elements: {
        game: null,
        message: null,
        restartButton: null,
        input: null,
      },
    };

    /**
     * @type {Object} –£—Ç–∏–ª–∏—Ç—ã –∏–≥—Ä—ã
     * @property {Function} renderDataAttributes - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
     * @property {Function} showToast - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @property {Function} getRandomNumber - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
     */
    this.utils = {
      renderDataAttributes: (element) => element.slice(1, -1),
      showToast: (message) => {
        Toastify({
          text: message,
          className:
            'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
          duration: 3000,
          gravity: 'bottom',
          position: 'center',
        }).showToast();
      },
      getRandomNumber: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
    };

    this.init();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏–≥—Ä—ã –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –µ–µ –≤ DOM.
   */
  createAppHTML() {
    const { root, selectors: { game, message, input } } = this.config;
    const { renderDataAttributes } = this.utils;
    const rootElement = document.querySelector(root);

    if (!rootElement) return;

    rootElement.innerHTML = `
    <div class='grid max-w-md w-full gap-4 rounded border p-3 shadow'>
      <h1 class='text-center text-2xl font-bold md:text-4xl'>Guess the number</h1>
      <p>Guess the Number is a game in which you have to guess a number given by the computer from 0 to 10. Use as few tries as possible. Good luck!</p>
      <form ${renderDataAttributes(game)}>
        <label aria-label='Enter a number'>
          <input class='w-full border-2 px-3 py-2.5' type='number' name='guess' placeholder='Enter a number' min='1' max='10' ${renderDataAttributes(input)}>
        </label>
      </form>
      <div class='hidden' ${renderDataAttributes(message)}></div>
    </div>
  `;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã.
   */
  initDOMElements() {
    this.state.elements = {
      game: document.querySelector(this.config.selectors.game),
      message: document.querySelector(this.config.selectors.message),
      input: document.querySelector(this.config.selectors.input),
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—è HTML, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π.
   */
  init() {
    console.log(this.state.randomNumber);
    this.createAppHTML();
    this.initDOMElements();
    this.state.elements.game.addEventListener('submit', this.handleFormSubmit.bind(this));
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —á–∏—Å–ª–∞.
   */
  showConfetti() {
    confetti({
      angle: this.utils.getRandomNumber(55, 125),
      spread: this.utils.getRandomNumber(50, 70),
      particleCount: this.utils.getRandomNumber(50, 100),
      origin: { y: 0.6 },
    });
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤ –∏–≥—Ä–µ.
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  messageHandlers() {
    return {
      error: (message) => {
        this.utils.showToast(message);
        this.state.elements.input.disabled = true;
        setTimeout(() => {
          this.state.elements.input.disabled = false;
          this.state.elements.input.focus();
        }, 2000);
      },
      lost: () => this.renderMessage('orange'),
      success: () => this.renderMessage('green'),
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã —Å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–º —á–∏—Å–ª–æ–º.
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
   */
  handleFormSubmit(event) {
    event.preventDefault();
    const guessInput = +event.target.guess.value;
    try {
      if (!guessInput) {
        throw new Error('Please enter a number.');
      }
      if (isNaN(guessInput)) {
        throw new Error('Please enter the correct number.');
      }
      if (guessInput < 1 || guessInput > 10) {
        throw new Error('Please enter a number between 1 and 10.');
      }
      if (guessInput === this.state.randomNumber) {
        this.showMessage('success', 'You guessed it! ü•≥');
        this.state.elements.game.remove();
        this.showConfetti();
      } else {
        this.state.maxAttempts--;
        if (this.state.maxAttempts === 0) {
          this.state.elements.game.remove();
          this.showMessage(
            'lost',
            `You lost ü•≤! The guessed number was ${this.state.randomNumber}`,
          );
        } else {
          this.showMessage('error', `Try again. Attempts left: ${this.state.maxAttempts}`);
          this.state.elements.game.reset();
        }
      }
    } catch (error) {
      this.utils.showToast(error.message);
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
   * @param {string} messageType - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  showMessage(messageType, message) {
    if (this.state.elements.message) {
      this.state.elements.message.textContent = message;
      const handler = this.messageHandlers()[messageType];
      if (handler) {
        handler(message);
      }
    }

    const restartButton = document.querySelector(this.config.selectors.restartButton);
    if (restartButton && messageType !== 'error') {
      restartButton.addEventListener('click', () => location.reload());
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–ª–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã.
   * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('orange' –∏–ª–∏ 'green')
   */
  renderMessage(type) {
    this.state.elements.message.classList.remove('hidden');
    this.state.elements.message.classList.add('text-center', 'font-bold');

    if (type === 'orange') {
      this.state.elements.message.classList.add('text-orange-400');
    } else if (type === 'green') {
      this.state.elements.message.classList.add('text-green-400');
    }

    const buttonClass = type === 'orange' ? 'bg-orange-400' : 'bg-green-400';
    this.state.elements.message.insertAdjacentHTML(
      'afterend',
      `<button class='border ${buttonClass} text-white px-3 py-2.5' ${this.utils.renderDataAttributes(this.config.selectors.restartButton)}>Play it again?</button>`,
    );
  }
}

new GuessRandomNumber();