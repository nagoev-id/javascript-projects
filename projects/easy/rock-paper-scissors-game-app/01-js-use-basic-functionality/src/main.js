/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–≥—Ä—É "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞" —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞.
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
 */

import './style.css';
import confetti from 'canvas-confetti';
import { icons } from 'feather-icons';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppConfig
 * @property {string} root - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @property {Object} selectors - –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
 * @property {Object} gameMessages - –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
 * @property {Object} icons - SVG –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
 */
const APP_CONFIG = {
  root: '#app',
  selectors: {
    choice: '[data-choice]',
    score: '[data-score]',
    message: '[data-message]',
    replay: '[data-action]',
    description: '[data-description]',
    options: '[data-options]',
  },
  gameMessages: {
    start: 'Get Started, Let\'s Rock!',
    win: 'You WIN ü•≥',
    lose: 'You LOSE ü§•',
    draw: 'DRAW ü§ù',
    makeMove: 'Make your move.',
  },
  icons: {
    rock: icons.octagon.toSvg({ width: 40, height: 40 }),
    paper: icons.file.toSvg({ width: 40, height: 40 }),
    scissors: icons.scissors.toSvg({ width: 40, height: 40 }),
  },
};

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppState
 * @property {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @property {Object} scores - –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏–≥—Ä—ã
 * @property {Object} elements - –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
 */
const APP_STATE = {
  maxAttempts: 3,
  scores: {
    user: 0,
    computer: 0,
  },
  elements: {
    choice: null,
    score: null,
    message: null,
    replay: null,
    description: null,
    options: null,
  },
};

/**
 * –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppUtils
 * @property {Function} renderDataAttributes - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
 * @property {Function} getRandomNumber - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
 */
const APP_UTILS = {
  renderDataAttributes: (element) => element.slice(1, -1),
  getRandomNumber: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
};

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function createAppHTML() {
  const {
    root,
    selectors: {
      choice,
      score,
      message,
      replay,
      description,
      options,
    },
    gameMessages: {
      start,
      makeMove,
    },
    icons: {
      rock,
      paper,
      scissors,
    },
  } = APP_CONFIG;
  const { renderDataAttributes } = APP_UTILS;
  const { scores: { computer, user } } = APP_STATE;
  const rootElement = document.querySelector(root);

  if (!rootElement) return;

  rootElement.innerHTML = `
     <div class='border shadow rounded max-w-xl w-full p-3 grid gap-4 md:p-5 bg-white'>
      <h1 class='text-center font-bold text-2xl md:text-4xl'>Rock Paper Scissors</h1>
      <main>
        <div class='border-4 border-black relative font-bold text-6xl md:text-8xl flex justify-center items-center p-10'>
          <span class='absolute top-1/2 -translate-y-1/2  text-sm left-0 p-2 bg-red-400 text-white'>user</span>
          <span class='absolute top-1/2 -translate-y-1/2  text-sm right-0 p-2 bg-red-400 text-white'>computer</span>
          <span ${renderDataAttributes(score)}='user'>${user}</span>:
          <span ${renderDataAttributes(score)}='computer'>${computer}</span>
        </div>
        <div class='text-center font-bold my-4' ${renderDataAttributes(message)}>${start}</div>
        <ul ${renderDataAttributes(options)} class='options grid gap-4 grid-cols-3 justify-items-center max-w-md mx-auto'>
          <li>
            <button class='border-4 border-black w-[80px] sm:w-[100px] h-[80px] sm:h-[100px] p-2 rounded-full' ${renderDataAttributes(choice)}='rock'>
              <div class='pointer-events-none flex justify-center'>${rock}</div>
            </button>
          </li>
          <li>
            <button class='border-4 border-black w-[80px] sm:w-[100px] h-[80px] sm:h-[100px] p-2 rounded-full' ${renderDataAttributes(choice)}='paper'>
              <div class='pointer-events-none flex justify-center'>${paper}</div>
            </button>
          </li>
          <li>
            <button class='border-4 border-black w-[80px] sm:w-[100px] h-[80px] sm:h-[100px] p-2 rounded-full' ${renderDataAttributes(choice)}='scissors'>
              <div class='pointer-events-none flex justify-center'>${scissors}</div>
            </button>
          </li>
        </ul>
      </main>
      <footer class='text-center grid place-items-center gap-3'>
        <p ${renderDataAttributes(description)}>${makeMove}</p>
        <button class='hidden px-3 py-2.5 border text-white bg-red-400 hover:bg-red-500' ${renderDataAttributes(replay)}='replay'>Repeat Game</button>
      </footer>
    </div>
  `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
 */
function initDOMElements() {
  APP_STATE.elements = {
    score: document.querySelectorAll(APP_CONFIG.selectors.score),
    message: document.querySelector(APP_CONFIG.selectors.message),
    replay: document.querySelector(APP_CONFIG.selectors.replay),
    description: document.querySelector(APP_CONFIG.selectors.description),
    options: document.querySelector(APP_CONFIG.selectors.options),
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function initApp() {
  createAppHTML();
  initDOMElements();
  APP_STATE.elements.options.addEventListener('click', (event) => {
    const choice = event.target.closest(APP_CONFIG.selectors.choice);
    if (choice) {
      handleChoiceClick({ target: choice });
    }
  });
  APP_STATE.elements.replay.addEventListener('click', () => location.reload());
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
 */
function showConfetti() {
  confetti({
    angle: APP_UTILS.getRandomNumber(55, 125),
    spread: APP_UTILS.getRandomNumber(50, 70),
    particleCount: APP_UTILS.getRandomNumber(50, 100),
    origin: { y: 0.6 },
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–∞
 * @param {Object} param0 - –û–±—ä–µ–∫—Ç —Å —Ü–µ–ª—å—é –∫–ª–∏–∫–∞
 * @param {HTMLElement} param0.target - –≠–ª–µ–º–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–∫–Ω—É–ª–∏
 */
function handleChoiceClick({ target: choice }) {
  const choices = ['rock', 'paper', 'scissors'];
  const userChoice = choice.dataset.choice;
  const computerChoice = choices[Math.floor(Math.random() * choices.length)];
  const result = getResult(userChoice, computerChoice);
  showResult(userChoice, computerChoice, result);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 * @param {string} user - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} computer - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @returns {string} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã ('win', 'lose', –∏–ª–∏ 'draw')
 */
function getResult(user, computer) {
  if (user === computer) return 'draw';
  const winConditions = {
    rock: 'scissors',
    paper: 'rock',
    scissors: 'paper',
  };
  return winConditions[user] === computer ? 'win' : 'lose';
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 * @param {string} userChoice - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} computerChoice - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @param {string} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 */
function showResult(userChoice, computerChoice, result) {
  const { score: scoreElements } = APP_STATE.elements;
  const [userScoreElement, computerScoreElement] = scoreElements;
  const { [result]: scoreUpdate = { user: 0, computer: 0 } } = {
    win: { user: 1, computer: 0 },
    lose: { user: 0, computer: 1 },
    draw: { user: 1, computer: 1 },
  };
  APP_STATE.scores.user += scoreUpdate.user;
  APP_STATE.scores.computer += scoreUpdate.computer;

  userScoreElement.textContent = APP_STATE.scores.user.toString();
  computerScoreElement.textContent = APP_STATE.scores.computer.toString();

  showMessage(userChoice, computerChoice, result);
  checkGameEnd();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
 */
function checkGameEnd() {
  if (APP_STATE.scores.user === APP_STATE.maxAttempts && APP_STATE.scores.computer !== APP_STATE.maxAttempts) {
    finishGame('win', 'text-green-500');
    showConfetti();
  } else if (APP_STATE.scores.computer === APP_STATE.maxAttempts) {
    finishGame('lose', 'text-red-500');
  } else if (APP_STATE.scores.user === APP_STATE.maxAttempts && APP_STATE.scores.computer === APP_STATE.maxAttempts) {
    finishGame('draw', 'text-gray-500');
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É
 * @param {string} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 * @param {string} color - –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
function finishGame(result, color) {
  APP_STATE.elements.message.classList.add('text-2xl', color);
  APP_STATE.elements.message.textContent = APP_CONFIG.gameMessages[result];
  APP_STATE.elements.options.classList.add('hidden');
  APP_STATE.elements.description.classList.add('hidden');
  APP_STATE.elements.replay.classList.remove('hidden');
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
 * @param {string} userChoice - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} computerChoice - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @param {string} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
 */
function showMessage(userChoice, computerChoice, result) {
  const choices = { rock: 'Rock', paper: 'Paper', scissors: 'Scissors' };
  const resultText = { win: 'beats', lose: 'loses to', draw: 'equals' };
  APP_STATE.elements.message.innerHTML = `
    ${choices[userChoice]} <span class='text-sm'>(user)</span>
    ${resultText[result]}
    ${choices[computerChoice]} <span class='text-sm'>(comp)</span>.
  `;
}

initApp();