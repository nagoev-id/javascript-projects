/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ". –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 * –æ—Ç 1 –¥–æ 100. –ò–≥—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
 * –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã.
 */

import './style.css';
import confetti from 'canvas-confetti';
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã
 */
interface Config {
  /** –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
  root: string;
  /** –û–±—ä–µ–∫—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
  selectors: {
    /** –°–µ–ª–µ–∫—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–≥–∞–¥–æ–∫ */
    guessHistory: string;
    /** –°–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ */
    guessForm: string;
    /** –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    guessInput: string;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 */
interface State {
  /** –ò–º—è –∏–≥—Ä–æ–∫–∞ */
  player: string | null;
  /** –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ */
  counter: number;
  /** –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ */
  secretNumber: number;
  /** –û–±—ä–µ–∫—Ç —Å DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
  elements: {
    /** –≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–≥–∞–¥–æ–∫ */
    guessHistory: HTMLUListElement | null;
    /** –≠–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ */
    guessForm: HTMLFormElement | null;
    /** –≠–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    guessInput: HTMLInputElement | null;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
interface Utils {
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ */
  renderDataAttributes: (element: string) => string;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ */
  getRandomNumber: (min: number, max: number) => number;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
  showToast: (message: string) => void;
}

/**
 * –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
 */
class GuessNumber {
  private readonly config: Config;
  private state: State;
  private readonly utils: Utils;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ GuessNumber
   */
  constructor() {
    this.config = {
      root: '#app',
      selectors: {
        guessHistory: '[data-guess-history]',
        guessForm: '[data-guess-form]',
        guessInput: '[data-guess-input]',
      },
    };

    this.state = {
      player: null,
      counter: 0,
      secretNumber: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
      elements: {
        guessHistory: null,
        guessForm: null,
        guessInput: null,
      },
    };

    this.utils = {
      renderDataAttributes: (element: string): string => element.slice(1, -1),
      getRandomNumber: (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min,
      showToast: (message: string): void => {
        Toastify({
          text: message,
          className: 'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
          duration: 3000,
          gravity: 'bottom',
          position: 'center',
        }).showToast();
      },
    };

    this.init();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private createAppHTML(): void {
    const { root, selectors: { guessHistory, guessForm, guessInput } } = this.config;
    const { renderDataAttributes } = this.utils;
    const rootElement = document.querySelector<HTMLElement>(root);

    if (!rootElement) return;

    rootElement.innerHTML = `
      <div class='grid gap-3 p-4 text-yellow-400'>
        <h1 class='text-2xl font-bold md:text-5xl'>üé≤ Guess number</h1>
        <ul class='grid gap-2' ${renderDataAttributes(guessHistory)}></ul>
        <form ${renderDataAttributes(guessForm)}>
          <label>
            <input 
              class='border-b-2 border-yellow-400 bg-transparent px-3 py-2.5 outline-none'
              type='text'
              name='guess'
              ${renderDataAttributes(guessInput)}
            >
          </label>
        </form>
      </div>
    `;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  private initDOMElements(): void {
    this.state.elements = {
      guessHistory: document.querySelector<HTMLUListElement>(this.config.selectors.guessHistory),
      guessForm: document.querySelector<HTMLFormElement>(this.config.selectors.guessForm),
      guessInput: document.querySelector<HTMLInputElement>(this.config.selectors.guessInput),
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É
   */
  private init(): void {
    this.createAppHTML();
    this.initDOMElements();

    if (this.state.elements.guessInput) {
      this.state.elements.guessInput.focus();
    }
    this.displayMessage('üë® Enter your name:');
    this.state.elements.guessForm?.addEventListener('submit', this.handleGuessFormSubmit.bind(this));
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
   */
  private showConfetti(): void {
    confetti({
      angle: this.utils.getRandomNumber(55, 125),
      spread: this.utils.getRandomNumber(50, 70),
      particleCount: this.utils.getRandomNumber(50, 100),
      origin: { y: 0.6 },
    });
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä—ã
   * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private displayMessage(message: string): void {
    const li = document.createElement('li');
    li.className = 'text-xl';
    li.textContent = message;
    this.state.elements.guessHistory?.appendChild(li);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
   * @param event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
   */
  private handleGuessFormSubmit(event: Event): void {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    const guess = formData.get('guess') as string;

    if (!guess) {
      this.utils.showToast('Please enter a guess');
      return;
    }

    if (!this.state.player) {
      this.initializePlayer(guess);
      return;
    }

    const guessNumber = Number(guess);
    if (isNaN(guessNumber)) {
      this.utils.showToast('Please enter a valid number');
      return;
    }

    this.processGuess(guessNumber, form);
    if (this.state.elements.guessInput) {
      this.state.elements.guessInput.value = '';
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞
   * @param name - –ò–º—è –∏–≥—Ä–æ–∫–∞
   */
  private initializePlayer(name: string): void {
    this.state.player = name;
    if (this.state.elements.guessHistory) {
      this.state.elements.guessHistory.innerHTML = '';
    }
    this.displayMessage(
      `üë® ${name}, there is a number between 0 and 100. Try to guess it in the fewest number of tries. After each attempt, there will be a message with the text - 'Few', 'Many' or 'Right'.`,
    );
    if (this.state.elements.guessInput) {
      this.state.elements.guessInput.value = '';
      this.state.elements.guessInput.setAttribute('type', 'number');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
   * @param guessNumber - –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —á–∏—Å–ª–æ
   * @param form - –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
   */
  private processGuess(guessNumber: number, form: HTMLFormElement): void {
    this.displayMessage(guessNumber.toString());
    this.state.counter++;

    if (guessNumber !== this.state.secretNumber) {
      this.displayMessage(
        guessNumber > this.state.secretNumber
          ? '‚¨áÔ∏è Many. Try again üò∏'
          : '‚¨ÜÔ∏è Few. Try again üò∏',
      );
    } else {
      this.displayMessage(`üéä Right. The number you've guessed: ${guessNumber}`);
      this.displayMessage(`üéâ Number of attempts: ${this.state.counter}`);
      this.showConfetti();
      form.remove();
    }
  }
}

new GuessNumber();