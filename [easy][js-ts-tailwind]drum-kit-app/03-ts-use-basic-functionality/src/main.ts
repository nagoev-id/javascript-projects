/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤, –∫–ª–∏–∫–∞—è –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 * –∏–ª–∏ –Ω–∞–∂–∏–º–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –ö–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥,
 * –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–≤—É–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤.
 */

import './style.css';
import w from '/images/tom1.png';
import a from '/images/tom2.png';
import s from '/images/tom3.png';
import d from '/images/tom4.png';
import j from '/images/snare.png';
import k from '/images/crash.png';
import l from '/images/kick.png';
import sound1 from '/sounds/tom-1.mp3';
import sound2 from '/sounds/tom-2.mp3';
import sound3 from '/sounds/tom-3.mp3';
import sound4 from '/sounds/tom-4.mp3';
import sound5 from '/sounds/crash.mp3';
import sound6 from '/sounds/snare.mp3';
import sound7 from '/sounds/kick-bass.mp3';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppConfig
 * @property {string} root - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @property {Object} selectors - –û–±—ä–µ–∫—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * @property {string} selectors.drumList - –°–µ–ª–µ–∫—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤
 */
interface AppConfig {
  root: string;
  selectors: {
    drumList: string;
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppConfig}
 */
const APP_CONFIG: AppConfig = {
  root: '#app',
  selectors: {
    drumList: '[data-drum-list]',
  },
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppState
 * @property {Object} elements - –û–±—ä–µ–∫—Ç —Å DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 * @property {HTMLUListElement | null} elements.drumList - –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤
 */
interface AppState {
  elements: {
    drumList: HTMLUListElement | null;
  };
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppState}
 */
const APP_STATE: AppState = {
  elements: {
    drumList: null,
  },
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ç–∏–ª–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @typedef {Object} AppUtils
 * @property {function(string): string} renderDataAttributes - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
 */
interface AppUtils {
  renderDataAttributes: (element: string) => string;
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppUtils}
 */
const APP_UTILS: AppUtils = {
  renderDataAttributes: (element: string) => element.slice(1, -1),
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
 * @interface DrumItem
 * @property {string} key - –ö–ª–∞–≤–∏—à–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –±–∞—Ä–∞–±–∞–Ω—É.
 * @property {string} image - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–∞.
 * @property {string} sound - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–≤—É–∫–∞ –±–∞—Ä–∞–±–∞–Ω–∞.
 */
interface DrumItem {
  key: string;
  image: string;
  sound: string;
}


/**
 * –°–æ–∑–¥–∞–µ—Ç HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function createAppHTML(): void {
  const {
    root,
    selectors: { drumList },
  } = APP_CONFIG;
  const { renderDataAttributes } = APP_UTILS;
  const rootElement = document.querySelector(root);
  const drumItems: DrumItem[] = [
    { key: 'w', image: w, sound: 'sound1' },
    { key: 'a', image: a, sound: 'sound2' },
    { key: 's', image: s, sound: 'sound3' },
    { key: 'd', image: d, sound: 'sound4' },
    { key: 'j', image: j, sound: 'sound5' },
    { key: 'k', image: k, sound: 'sound6' },
    { key: 'l', image: l, sound: 'sound7' },
  ];

  if (!rootElement) return;

  rootElement.innerHTML = `
    <div class='drum-kit grid w-full max-w-8xl gap-4 rounded border bg-white p-3 shadow'>
      <h1 class='text-center text-2xl font-bold md:text-4xl'>Drum ü•Å Kit</h1>
      <ul ${renderDataAttributes(drumList)}>
        ${drumItems.map(item => `<li class='${item.key}' style="background-image: url('${item.image}')" data-drum-key='${item.key}' data-drum-sound='${item.sound}'>${item.key}</li>`).join('')}
      </ul>
    </div>
  `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function initDOMElements(): void {
  APP_STATE.elements = {
    drumList: document.querySelector(APP_CONFIG.selectors.drumList),
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function initApp(): void {
  createAppHTML();
  initDOMElements();
  APP_STATE.elements.drumList?.addEventListener('click', handleDrumKit);
  window.addEventListener('keydown', handleDrumKit);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–ª–∏–∫ –º—ã—à–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏)
 * @param {MouseEvent | KeyboardEvent} event - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function handleDrumKit(event: MouseEvent | KeyboardEvent): void {
  if (event.type === 'click' && event instanceof MouseEvent) {
    const target = event.target as HTMLElement;
    const key = target.closest<HTMLElement>('[data-drum-key]');
    const sound = key?.dataset.drumSound;

    if (key && sound) {
      animate(key);
      play(sound);
    }
  } else if (event.type === 'keydown' && event instanceof KeyboardEvent) {
    const keyboardKey = event.key.toLowerCase();
    const key = document.querySelector<HTMLElement>(
      `[data-drum-key="${keyboardKey}"]`,
    );
    if (key) {
      const sound = key.dataset.drumSound;
      if (sound) {
        animate(key);
        play(sound);
      }
    }
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∫ —ç–ª–µ–º–µ–Ω—Ç—É –±–∞—Ä–∞–±–∞–Ω–∞
 * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –±–∞—Ä–∞–±–∞–Ω–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
 */
function animate(element: HTMLElement): void {
  element.classList.add('pressed');
  setTimeout(() => element.classList.remove('pressed'), 300);
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Ä—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
 * @typedef {Object} AudioMap
 * @property {string} [key: string] - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
 */
interface AudioMap {
  [key: string]: string;
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –±–∞—Ä–∞–±–∞–Ω–∞
 * @param {string} audioName - –ò–º—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
 */
function play(audioName: string): void {
  const audioMap: AudioMap = {
    sound1,
    sound2,
    sound3,
    sound4,
    sound5,
    sound6,
    sound7,
  };
  const audio: string | undefined = audioMap[audioName];
  if (audio) {
    new Audio(audio).play();
  }
}

initApp();
