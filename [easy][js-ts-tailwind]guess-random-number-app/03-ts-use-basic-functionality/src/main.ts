/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ". –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏.
 * –ö–æ–¥ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 */

import './style.css';
import confetti from "canvas-confetti";
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @interface
 */
interface AppConfig {
  /** –ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
  root: string;
  /** –û–±—ä–µ–∫—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
  selectors: {
    game: string;
    message: string;
    restartButton: string;
    input: string;
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppConfig}
 */
const APP_CONFIG: AppConfig = {
  root: '#app',
  selectors: {
    game: '[data-game]',
    message: '[data-message]',
    restartButton: '[data-restart-button]',
    input: '[data-input]',
  },
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @interface
 */
interface AppState {
  /** –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å */
  randomNumber: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  maxAttempts: number;
  /** –û–±—ä–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ DOM */
  elements: {
    game: HTMLFormElement | null;
    message: HTMLDivElement | null;
    restartButton: HTMLButtonElement | null;
    input: HTMLInputElement | null;
  };
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppState}
 */
const APP_STATE: AppState = {
  randomNumber: Math.floor(Math.random() * (10 - 1 + 1)) + 1,
  maxAttempts: 3,
  elements: {
    game: null,
    message: null,
    restartButton: null,
    input: null,
  },
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ç–∏–ª–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @interface
 */
interface AppUtils {
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ */
  renderDataAttributes: (element: string) => string;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è toast-—Å–æ–æ–±—â–µ–Ω–∏—è */
  showToast: (message: string) => void;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ */
  getRandomNumber: (min: number, max: number) => number;
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @type {AppUtils}
 */
const APP_UTILS: AppUtils = {
  renderDataAttributes: (element: string): string => element.slice(1, -1),

  showToast: (message: string): void => {
    Toastify({
      text: message,
      className: 'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
      duration: 3000,
      gravity: 'bottom',
      position: 'center',
    }).showToast();
  },

  getRandomNumber: (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min,
};

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function createAppHTML(): void {
  const { root, selectors: { game, message, input } } = APP_CONFIG;
  const { renderDataAttributes } = APP_UTILS;
  const rootElement = document.querySelector<HTMLDivElement>(root);

  if (!rootElement) return;

  rootElement.innerHTML = `
    <div class='grid max-w-md w-full gap-4 rounded border p-3 shadow'>
      <h1 class='text-center text-2xl font-bold md:text-4xl'>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h1>
      <p>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ, –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –æ—Ç 0 –¥–æ 10. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫. –£–¥–∞—á–∏!</p>
      <form ${renderDataAttributes(game)}>
        <label aria-label='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'>
          <input class='w-full border-2 px-3 py-2.5' type='number' name='guess' placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ' min='1' max='10' ${renderDataAttributes(input)}>
        </label>
      </form>
      <div class='hidden' ${renderDataAttributes(message)}></div>
    </div>
  `;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
 */
function initDOMElements(): void {
  APP_STATE.elements = {
    game: document.querySelector<HTMLFormElement>(APP_CONFIG.selectors.game),
    message: document.querySelector<HTMLDivElement>(APP_CONFIG.selectors.message),
    input: document.querySelector<HTMLInputElement>(APP_CONFIG.selectors.input),
    restartButton: null,
  };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function initApp(): void {
  console.log(APP_STATE.randomNumber);
  createAppHTML();
  initDOMElements();
  APP_STATE.elements.game?.addEventListener('submit', handleFormSubmit);
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
 */
function showConfetti(): void {
  confetti({
    angle: APP_UTILS.getRandomNumber(55, 125),
    spread: APP_UTILS.getRandomNumber(50, 70),
    particleCount: APP_UTILS.getRandomNumber(50, 100),
    origin: { y: 0.6 },
  });
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @interface
 */
interface MessageHandlers {
  error: (message: string) => void;
  lost: () => void;
  success: () => void;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @type {MessageHandlers}
 */
const messageHandlers: MessageHandlers = {
  error: (message: string) => {
    APP_UTILS.showToast(message);
    if (APP_STATE.elements.input) {
      APP_STATE.elements.input.disabled = true;
      setTimeout(() => {
        if (APP_STATE.elements.input) {
          APP_STATE.elements.input.disabled = false;
          APP_STATE.elements.input.focus();
        }
      }, 2000);
    }
  },
  lost: () => renderMessage('orange'),
  success: () => renderMessage('green'),
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 */
function handleFormSubmit(event: Event): void {
  event.preventDefault();
  const target = event.target as HTMLFormElement;
  const guessInput = +(target.guess as HTMLInputElement).value;
  try {
    if (!guessInput) {
      throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
    }
    if (isNaN(guessInput)) {
      throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
    }
    if (guessInput < 1 || guessInput > 10) {
      throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.');
    }
    if (guessInput === APP_STATE.randomNumber) {
      showMessage('success', '–í—ã —É–≥–∞–¥–∞–ª–∏! ü•≥');
      APP_STATE.elements.game?.remove();
      showConfetti();
    } else {
      APP_STATE.maxAttempts--;
      if (APP_STATE.maxAttempts === 0) {
        APP_STATE.elements.game?.remove();
        showMessage(
          'lost',
          `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü•≤! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ ${APP_STATE.randomNumber}`,
        );
      } else {
        showMessage('error', `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${APP_STATE.maxAttempts}`);
        APP_STATE.elements.game?.reset();
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      APP_UTILS.showToast(error.message);
    }
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {keyof MessageHandlers} messageType - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function showMessage(messageType: keyof MessageHandlers, message: string): void {
  if (APP_STATE.elements.message) {
    APP_STATE.elements.message.textContent = message;
    const handler = messageHandlers[messageType];
    if (handler) {
      handler(message);
    }
  }

  const restartButton = document.querySelector<HTMLButtonElement>(APP_CONFIG.selectors.restartButton);
  if (restartButton && messageType !== 'error') {
    restartButton.addEventListener('click', () => location.reload());
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
 * @param {'orange' | 'green'} type - –¢–∏–ø —Ü–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function renderMessage(type: 'orange' | 'green'): void {
  if (APP_STATE.elements.message) {
    APP_STATE.elements.message.classList.remove('hidden');
    APP_STATE.elements.message.classList.add('text-center', 'font-bold');

    if (type === 'orange') {
      APP_STATE.elements.message.classList.add('text-orange-400');
    } else if (type === 'green') {
      APP_STATE.elements.message.classList.add('text-green-400');
    }

    const buttonClass = type === 'orange' ? 'bg-orange-400' : 'bg-green-400';
    APP_STATE.elements.message.insertAdjacentHTML(
      'afterend',
      `<button class='border ${buttonClass} text-white px-3 py-2.5' data-restart-button>–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?</button>`,
    );
  }
}

initApp();