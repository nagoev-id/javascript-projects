/**
 * –≠—Ç–æ—Ç –∫–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ". –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏.
 * –ö–æ–¥ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 */

import './style.css';
import confetti from 'canvas-confetti';
import Toastify from 'toastify-js';
import 'toastify-js/src/toastify.css';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã
 * @interface
 */
interface Config {
  /** –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
  root: string;
  /** –û–±—ä–µ–∫—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã */
  selectors: {
    game: string;
    message: string;
    restartButton: string;
    input: string;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 * @interface
 */
interface State {
  /** –°–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è */
  randomNumber: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  maxAttempts: number;
  /** –û–±—ä–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ DOM */
  elements: {
    game: HTMLFormElement | null;
    message: HTMLDivElement | null;
    restartButton: HTMLButtonElement | null;
    input: HTMLInputElement | null;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Ç–∏–ª–∏—Ç –∏–≥—Ä—ã
 * @interface
 */
interface Utils {
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ */
  renderDataAttributes: (element: string) => string;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
  showToast: (message: string) => void;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ */
  getRandomNumber: (min: number, max: number) => number;
}

/**
 * –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
 */
class GuessRandomNumber {
  /** –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã */
  private readonly config: Config;
  /** –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã */
  private state: State;
  /** –£—Ç–∏–ª–∏—Ç—ã –∏–≥—Ä—ã */
  private readonly utils: Utils;

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
   */
  constructor() {
    this.config = {
      root: '#app',
      selectors: {
        game: '[data-game]',
        message: '[data-message]',
        restartButton: '[data-restart-button]',
        input: '[data-input]',
      },
    };

    this.state = {
      randomNumber: Math.floor(Math.random() * (10 - 1 + 1)) + 1,
      maxAttempts: 3,
      elements: {
        game: null,
        message: null,
        restartButton: null,
        input: null,
      },
    };

    this.utils = {
      renderDataAttributes: (element: string): string => element.slice(1, -1),
      showToast: (message: string): void => {
        Toastify({
          text: message,
          className:
            'bg-none shadow-none bg-orange-100 text-black border border-orange-200',
          duration: 3000,
          gravity: 'bottom',
          position: 'center',
        }).showToast();
      },
      getRandomNumber: (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min,
    };

    this.init();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏–≥—Ä—ã
   */
  private createAppHTML(): void {
    const { root, selectors: { game, message, input } } = this.config;
    const { renderDataAttributes } = this.utils;
    const rootElement = document.querySelector(root);

    if (!rootElement) return;

    rootElement.innerHTML = `
    <div class='grid max-w-md w-full gap-4 rounded border p-3 shadow'>
      <h1 class='text-center text-2xl font-bold md:text-4xl'>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h1>
      <p>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10, –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫. –£–¥–∞—á–∏!</p>
      <form ${renderDataAttributes(game)}>
        <label aria-label='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'>
          <input class='w-full border-2 px-3 py-2.5' type='number' name='guess' placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ' min='1' max='10' ${renderDataAttributes(input)}>
        </label>
      </form>
      <div class='hidden' ${renderDataAttributes(message)}></div>
    </div>
  `;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã DOM
   */
  private initDOMElements(): void {
    this.state.elements = {
      game: document.querySelector<HTMLFormElement>(this.config.selectors.game),
      message: document.querySelector<HTMLDivElement>(this.config.selectors.message),
      input: document.querySelector<HTMLInputElement>(this.config.selectors.input),
      restartButton: null,
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É
   */
  private init(): void {
    console.log(this.state.randomNumber);
    this.createAppHTML();
    this.initDOMElements();
    this.state.elements.game?.addEventListener('submit', this.handleFormSubmit.bind(this));
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
   */
  private showConfetti(): void {
    confetti({
      angle: this.utils.getRandomNumber(55, 125),
      spread: this.utils.getRandomNumber(50, 70),
      particleCount: this.utils.getRandomNumber(50, 100),
      origin: { y: 0.6 },
    });
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private messageHandlers(): { [key: string]: (message?: string) => void } {
    return {
      error: (message?: string) => {
        this.utils.showToast(message || '');
        if (this.state.elements.input) {
          this.state.elements.input.disabled = true;
          setTimeout(() => {
            if (this.state.elements.input) {
              this.state.elements.input.disabled = false;
              this.state.elements.input.focus();
            }
          }, 2000);
        }
      },
      lost: () => this.renderMessage('orange'),
      success: () => this.renderMessage('green'),
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
   */
  private handleFormSubmit(event: Event): void {
    event.preventDefault();
    const target = event.target as HTMLFormElement;
    const guessInput = +(target.guess as HTMLInputElement).value;
    try {
      if (!guessInput) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
      }
      if (isNaN(guessInput)) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
      }
      if (guessInput < 1 || guessInput > 10) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.');
      }
      if (guessInput === this.state.randomNumber) {
        this.showMessage('success', '–í—ã —É–≥–∞–¥–∞–ª–∏! ü•≥');
        this.state.elements.game?.remove();
        this.showConfetti();
      } else {
        this.state.maxAttempts--;
        if (this.state.maxAttempts === 0) {
          this.state.elements.game?.remove();
          this.showMessage(
            'lost',
            `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü•≤! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ ${this.state.randomNumber}`,
          );
        } else {
          this.showMessage('error', `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${this.state.maxAttempts}`);
          this.state.elements.game?.reset();
        }
      }
    } catch (error) {
      if (error instanceof Error) {
        this.utils.showToast(error.message);
      }
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} messageType - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private showMessage(messageType: string, message: string): void {
    if (this.state.elements.message) {
      this.state.elements.message.textContent = message;
      const handler = this.messageHandlers()[messageType];
      if (handler) {
        handler(message);
      }
    }

    const restartButton = document.querySelector<HTMLButtonElement>(this.config.selectors.restartButton);
    if (restartButton && messageType !== 'error') {
      restartButton.addEventListener('click', () => location.reload());
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–ª–µ–º
   * @param {('orange'|'green')} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–π)
   */
  private renderMessage(type: 'orange' | 'green'): void {
    if (this.state.elements.message) {
      this.state.elements.message.classList.remove('hidden');
      this.state.elements.message.classList.add('text-center', 'font-bold');

      if (type === 'orange') {
        this.state.elements.message.classList.add('text-orange-400');
      } else if (type === 'green') {
        this.state.elements.message.classList.add('text-green-400');
      }

      const buttonClass = type === 'orange' ? 'bg-orange-400' : 'bg-green-400';
      this.state.elements.message.insertAdjacentHTML(
        'afterend',
        `<button class='border ${buttonClass} text-white px-3 py-2.5' ${this.utils.renderDataAttributes(this.config.selectors.restartButton)}>–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?</button>`,
      );
    }
  }
}

new GuessRandomNumber();